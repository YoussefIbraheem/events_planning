openapi: 3.0.3
info:
  title: Events Planning API
  version: 1.0.0 (v2)
paths:
  /api/events/:
    get:
      operationId: events_list
      parameters:
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter events starting from this date
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter events before this date
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - events
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
          description: ''
    post:
      operationId: events_create
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/:
    get:
      operationId: events_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - events
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    put:
      operationId: events_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - tokenAuth: 
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    patch:
      operationId: events_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    delete:
      operationId: events_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - events
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '204':
          description: No response body
  /api/events/organiser/{organiser_id}/:
    get:
      operationId: events_organiser_retrieve
      description: Return all events by a specific organiser.
      parameters:
      - in: path
        name: organiser_id
        schema:
          type: integer
        required: true
      tags:
      - events
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/login/:
    post:
      operationId: login_create
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          description: Unauthorized
  /api/logout/:
    post:
      operationId: logout_create
      tags:
      - logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          description: Logged out successfully
  /api/orders/:
    get:
      operationId: orders_list
      parameters:
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter orders created starting from this date
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter orders created before this date
      - in: query
        name: order_status
        schema:
          type: string
          enum:
          - cancelled
          - expired
          - paid
          - pending
          - reserved
        description: |-
          * `pending` - Pending
          * `reserved` - Reserved
          * `paid` - Paid
          * `cancelled` - Cancelled
          * `expired` - Expired
      tags:
      - orders
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: orders_create
      description: Handle order creation via the service layer.
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateOrder'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrder'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: orders_update
      description: Handle order updates through the service layer.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateOrder'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrder'
          description: ''
    patch:
      operationId: orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCreateOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCreateOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCreateOrder'
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrder'
          description: ''
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '204':
          description: No response body
  /api/orders/{id}/cancel/:
    post:
      operationId: orders_cancel_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          description: Order cancelled successfully.
        '400':
          description: Cancellation failed.
  /api/orders/{id}/checkout/:
    post:
      operationId: orders_checkout_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          description: Tickets reserved successfully.
        '400':
          description: Reservation failed.
  /api/orders/{id}/finalise/:
    post:
      operationId: orders_finalise_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      responses:
        '200':
          description: Tickets reserved successfully.
        '400':
          description: Reservation failed.
  /api/register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          description: Bad Request
  /api/tickets/:
    get:
      operationId: tickets_list
      parameters:
      - in: query
        name: available_only
        schema:
          type: boolean
        description: Show only available (unsold) tickets
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter events starting from this date
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter events before this date
      - in: query
        name: event_id
        schema:
          type: number
        description: Filter by event ID
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - tickets
      security:
      - tokenAuth:
      - TokenAuth:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
          description: ''
components:
  schemas:
    CreateOrder:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItem'
        payment_method:
          $ref: '#/components/schemas/CreateOrderPaymentMethodEnum'
      required:
      - items
      - payment_method
    CreateOrderItem:
      type: object
      properties:
        event_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
      required:
      - event_id
      - quantity
    CreateOrderPaymentMethodEnum:
      enum:
      - cash
      - credit
      type: string
      description: |-
        * `cash` - cash
        * `credit` - credit
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        date_time:
          type: string
          format: date-time
        tickets_amount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        ticket_price:
          type: number
          format: double
        organiser:
          type: string
          readOnly: true
        event_status:
          $ref: '#/components/schemas/EventStatusEnum'
      required:
      - date_time
      - description
      - id
      - organiser
      - ticket_price
      - tickets_amount
      - title
    EventStatusEnum:
      enum:
      - soon
      - upcoming
      - withheld
      - postponed
      - ongoing
      - cancelled
      - finished
      type: string
      description: |-
        * `soon` - Soon
        * `upcoming` - Upcoming
        * `withheld` - Withheld
        * `postponed` - Postponed
        * `ongoing` - Ongoing
        * `cancelled` - Cancelled
        * `finished` - Finished
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment_method:
          $ref: '#/components/schemas/OrderPaymentMethodEnum'
        order_status:
          $ref: '#/components/schemas/OrderStatusEnum'
        attendee:
          type: string
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
          format: double
      required:
      - attendee
      - id
      - items
      - payment_method
    OrderItem:
      type: object
      properties:
        event:
          type: string
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        event_ticket_price:
          type: string
          readOnly: true
        subtotal:
          type: string
          readOnly: true
      required:
      - event
      - event_ticket_price
      - subtotal
    OrderPaymentMethodEnum:
      enum:
      - cash
      - credit
      type: string
      description: |-
        * `cash` - Cash
        * `credit` - Credit
    OrderStatusEnum:
      enum:
      - pending
      - reserved
      - paid
      - cancelled
      - expired
      type: string
      description: |-
        * `pending` - Pending
        * `reserved` - Reserved
        * `paid` - Paid
        * `cancelled` - Cancelled
        * `expired` - Expired
    PaginatedEventList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    PatchedCreateOrder:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItem'
        payment_method:
          $ref: '#/components/schemas/CreateOrderPaymentMethodEnum'
    PatchedEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        date_time:
          type: string
          format: date-time
        tickets_amount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        ticket_price:
          type: number
          format: double
        organiser:
          type: string
          readOnly: true
        event_status:
          $ref: '#/components/schemas/EventStatusEnum'
    Register:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
      - username
    Ticket:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event:
          allOf:
          - $ref: '#/components/schemas/Event'
          readOnly: true
        attendee:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - attendee
      - created_at
      - event
      - id
      - updated_at
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - id
      - username
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
